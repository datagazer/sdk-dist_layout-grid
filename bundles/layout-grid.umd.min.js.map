{"version":3,"sources":["ng://@datagazer/layout-grid/lib/providers/layout-presets.ts","ng://@datagazer/layout-grid/lib/classes/layout-directive.ts","ng://@datagazer/layout-grid/lib/directives/container.directive.ts","ng://@datagazer/layout-grid/lib/directives/grid-cell.directive.ts","ng://@datagazer/layout-grid/lib/directives/grid-flow.directive.ts","ng://@datagazer/layout-grid/lib/directives/grid-gap.directive.ts","ng://@datagazer/layout-grid/lib/directives/grid.directive.ts","ng://@datagazer/layout-grid/lib/directives/place.directive.ts","ng://@datagazer/layout-grid/lib/layout-grid.module.ts"],"names":["LAYOUT_PRESETS","InjectionToken","factory","alias","columns","defaultMargin","defaultGutter","defaultColumnSpan","maxWidth","LayoutDirective","$elementRef","$mediaMarshaller","$mediaObserver","$styleUtils","$layoutPresets","subject$","_this","this","inputValue$","BehaviorSubject","undefined","init","nativeElement","directiveKey","value","next","layoutPreset$","defaultLayoutPreset","asObservable","pipe","map","activeLayoutPreset","subscribe","styleChange$","combineLatest","_a","inputValue","__read","buildStyle","Object","defineProperty","prototype","find","isActive","constructor","name","ngOnChanges","changes","entries","forEach","_b","input","currentValue","inputs","includes","setValue","extractSuffix","ngOnInit","style","applyStyleToElement","ngOnDestroy","releaseElement","result","exec","__decorate","__param","Inject","ElementRef","MediaMarshaller","MediaObserver","StyleUtils","Array","ContainerDirective","_super","apply","arguments","__extends","box-sizing","max-width","margin","padding","__decorate$1","Directive","selector","GridCellDirective","display","grid-column-end","__decorate$2","inputs$1","GridFlowDirective","grid-auto-flow","__decorate$3","inputs$2","GridGapDirective","grid-gap","__decorate$4","inputs$3","GridDirective","grid-template-columns","__decorate$5","inputs$4","PlaceDirective","place-self","__decorate$6","inputs$5","modules","CoreModule","directives","LayoutGridModule","__decorate$7","NgModule","imports","__spread","exports","declarations"],"mappings":"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","sourcesContent":["import { InjectionToken } from '@angular/core';\nimport { LayoutPreset } from '../interfaces/layout-preset';\n\nexport const LAYOUT_PRESETS = new InjectionToken<LayoutPreset[]>('LAYOUT_PRESETS', {\n  factory: () => [\n    {\n      alias: 'xs',\n      columns: 4,\n      defaultMargin: '16px',\n      defaultGutter: '16px',\n      defaultColumnSpan: 4\n    },\n\n    {\n      alias: 'sm',\n      columns: 8,\n      defaultMargin: '24px',\n      defaultGutter: '24px',\n      defaultColumnSpan: 4\n    },\n\n    {\n      alias: 'gt-sm',\n      columns: 12,\n      defaultMargin: '24px',\n      defaultGutter: '24px',\n      defaultColumnSpan: 4,\n      maxWidth: '1280px'\n    }\n  ]\n});\n","import { ElementRef, Inject, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';\nimport { MediaMarshaller, MediaObserver, StyleDefinition, StyleUtils } from '@angular/flex-layout/core';\nimport { BehaviorSubject, Observable, combineLatest } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { LayoutPreset } from '../interfaces/layout-preset';\nimport { LAYOUT_PRESETS } from '../providers/layout-presets';\n\nexport abstract class LayoutDirective implements OnChanges, OnInit, OnDestroy {\n  protected abstract inputs: string[];\n\n  protected inputValue$: BehaviorSubject<string | undefined> = (() => {\n    let subject$ = new BehaviorSubject<string | undefined>(undefined);\n\n    this.$mediaMarshaller.init(\n      this.nativeElement,\n      this.directiveKey,\n\n      (value) => {\n        if (value !== subject$.value) {\n          subject$.next(value);\n        }\n      }\n    );\n\n    return subject$;\n  })();\n\n  protected layoutPreset$: BehaviorSubject<LayoutPreset> = (() => {\n    let subject$ = new BehaviorSubject<LayoutPreset>(this.defaultLayoutPreset);\n\n    {\n      let source$ = this.$mediaObserver.asObservable();\n\n      source$.pipe(\n        map(() => this.activeLayoutPreset || this.defaultLayoutPreset)\n      ).subscribe(subject$);\n    }\n\n    return subject$\n  })();\n\n  protected styleChange$: Observable<StyleDefinition> = (() => {\n    let source$ = combineLatest(this.inputValue$, this.layoutPreset$);\n\n    return source$.pipe(\n      map(([inputValue]) => this.buildStyle(inputValue))\n    );\n  })();\n\n  protected get activeLayoutPreset(): LayoutPreset | undefined {\n    return this.$layoutPresets.find(({ alias }) => this.$mediaObserver.isActive(alias));\n  }\n\n  protected get defaultLayoutPreset(): LayoutPreset {\n    return this.$layoutPresets[0];\n  }\n\n  protected get nativeElement(): HTMLElement {\n    return this.$elementRef.nativeElement;\n  }\n\n  protected get directiveKey(): string {\n    return this.constructor.name;\n  }\n\n  public constructor(\n    protected readonly $elementRef: ElementRef<HTMLElement>,\n    protected readonly $mediaMarshaller: MediaMarshaller,\n    protected readonly $mediaObserver: MediaObserver,\n    protected readonly $styleUtils: StyleUtils,\n\n    @Inject(LAYOUT_PRESETS)\n    protected readonly $layoutPresets: LayoutPreset[]\n  ) {}\n\n  public ngOnChanges(changes: SimpleChanges): void {\n    Object.entries(changes).forEach(([input, { currentValue }]) => {\n      if (this.inputs.includes(input)) {\n        this.$mediaMarshaller.setValue(\n          this.nativeElement,\n          this.directiveKey,\n          currentValue,\n          this.extractSuffix(input)\n        );\n      }\n    });\n  }\n\n  public ngOnInit(): void {\n    this.styleChange$.subscribe((style) => {\n      this.$styleUtils.applyStyleToElement(this.nativeElement, style);\n    });\n  }\n\n  public ngOnDestroy(): void {\n    this.$mediaMarshaller.releaseElement(this.nativeElement);\n  }\n\n  protected abstract buildStyle(inputValue?: string): StyleDefinition;\n\n  private extractSuffix(input: string): string {\n    let result = /\\.(xs|sm|md|lg|xl|lt-sm|lt-md|lt-lg|lt-xl|gt-xs|gt-sm|gt-md|gt-lg)$/.exec(input);\n\n    if (result) {\n      return result[1];\n    }\n\n    return '';\n  }\n}\n","import { Directive } from '@angular/core';\nimport { StyleDefinition } from '@angular/flex-layout/core';\nimport { LayoutDirective } from '../classes/layout-directive';\n\nconst selector: string = `\n  [dgContainer]\n`;\n\nconst inputs: string[] = [\n  // No inputs\n];\n\n@Directive({\n  selector,\n  inputs\n})\nexport class ContainerDirective extends LayoutDirective {\n  public inputs: string[] = inputs;\n\n  public buildStyle(): StyleDefinition {\n    let { maxWidth, defaultMargin } = this.layoutPreset$.value;\n\n    return {\n      'box-sizing': 'border-box',\n      'max-width': maxWidth || null,\n      'margin': maxWidth ? '0 auto' : null,\n      'padding': defaultMargin\n    };\n  }\n}\n","import { Directive } from '@angular/core';\nimport { StyleDefinition } from '@angular/flex-layout/core';\nimport { LayoutDirective } from '../classes/layout-directive';\n\nconst selector: string = `\n  [dgGridCell],\n  [dgGridCell.xs], [dgGridCell.sm], [dgGridCell.md], [dgGridCell.lg], [dgGridCell.xl],\n  [dgGridCell.lt-sm], [dgGridCell.lt-md], [dgGridCell.lt-lg], [dgGridCell.lt-xl],\n  [dgGridCell.gt-xs], [dgGridCell.gt-sm], [dgGridCell.gt-md], [dgGridCell.gt-lg]\n`;\n\nconst inputs: string[] = [\n  'dgGridCell',\n  'dgGridCell.xs', 'dgGridCell.sm', 'dgGridCell.md', 'dgGridCell.lg', 'dgGridCell.xl',\n  'dgGridCell.lt-sm', 'dgGridCell.lt-md', 'dgGridCell.lt-lg', 'dgGridCell.lt-xl',\n  'dgGridCell.gt-xs', 'dgGridCell.gt-sm', 'dgGridCell.gt-md', 'dgGridCell.gt-lg'\n];\n\n@Directive({\n  selector,\n  inputs\n})\nexport class GridCellDirective extends LayoutDirective {\n  public inputs: string[] = inputs;\n\n  public buildStyle(inputValue?: string): StyleDefinition {\n    let { defaultColumnSpan } = this.layoutPreset$.value;\n\n    return {\n      'display': 'grid',\n      'grid-column-end': `span ${inputValue || defaultColumnSpan}`\n    };\n  }\n}\n","import { Directive } from '@angular/core';\nimport { StyleDefinition } from '@angular/flex-layout/core';\nimport { LayoutDirective } from '../classes/layout-directive';\n\nconst selector: string = `\n  [dgGridFlow],\n  [dgGridFlow.xs], [dgGridFlow.sm], [dgGridFlow.md], [dgGridFlow.lg], [dgGridFlow.xl],\n  [dgGridFlow.lt-sm], [dgGridFlow.lt-md], [dgGridFlow.lt-lg], [dgGridFlow.lt-xl],\n  [dgGridFlow.gt-xs], [dgGridFlow.gt-sm], [dgGridFlow.gt-md], [dgGridFlow.gt-lg]\n`;\n\nconst inputs: string[] = [\n  'dgGridFlow',\n  'dgGridFlow.xs', 'dgGridFlow.sm', 'dgGridFlow.md', 'dgGridFlow.lg', 'dgGridFlow.xl',\n  'dgGridFlow.lt-sm', 'dgGridFlow.lt-md', 'dgGridFlow.lt-lg', 'dgGridFlow.lt-xl',\n  'dgGridFlow.gt-xs', 'dgGridFlow.gt-sm', 'dgGridFlow.gt-md', 'dgGridFlow.gt-lg'\n];\n\n@Directive({\n  selector,\n  inputs\n})\nexport class GridFlowDirective extends LayoutDirective {\n  public inputs: string[] = inputs;\n\n  public buildStyle(inputValue?: string): StyleDefinition {\n    return {\n      'display': 'grid',\n      'grid-auto-flow': inputValue || 'row'\n    };\n  }\n}\n","import { Directive } from '@angular/core';\nimport { StyleDefinition } from '@angular/flex-layout/core';\nimport { LayoutDirective } from '../classes/layout-directive';\n\nconst selector: string = `\n  [dgGridGap],\n  [dgGridGap.xs], [dgGridGap.sm], [dgGridGap.md], [dgGridGap.lg], [dgGridGap.xl],\n  [dgGridGap.lt-sm], [dgGridGap.lt-md], [dgGridGap.lt-lg], [dgGridGap.lt-xl],\n  [dgGridGap.gt-xs], [dgGridGap.gt-sm], [dgGridGap.gt-md], [dgGridGap.gt-lg]\n`;\n\nconst inputs: string[] = [\n  'dgGridGap',\n  'dgGridGap.xs', 'dgGridGap.sm', 'dgGridGap.md', 'dgGridGap.lg', 'dgGridGap.xl',\n  'dgGridGap.lt-sm', 'dgGridGap.lt-md', 'dgGridGap.lt-lg', 'dgGridGap.lt-xl',\n  'dgGridGap.gt-xs', 'dgGridGap.gt-sm', 'dgGridGap.gt-md', 'dgGridGap.gt-lg'\n];\n\n@Directive({\n  selector,\n  inputs\n})\nexport class GridGapDirective extends LayoutDirective {\n  public inputs: string[] = inputs;\n\n  public buildStyle(inputValue?: string): StyleDefinition {\n    let { defaultGutter } = this.layoutPreset$.value;\n\n    return {\n      'display': 'grid',\n      'grid-gap': inputValue || defaultGutter\n    };\n  }\n}\n","import { Directive } from '@angular/core';\nimport { StyleDefinition } from '@angular/flex-layout/core';\nimport { LayoutDirective } from '../classes/layout-directive';\n\nconst selector: string = `\n  [dgGrid]\n`;\n\nconst inputs: string[] = [\n  // No inputs\n];\n\n@Directive({\n  selector,\n  inputs\n})\nexport class GridDirective extends LayoutDirective {\n  public inputs: string[] = inputs;\n\n  public buildStyle(): StyleDefinition {\n    let { columns } = this.layoutPreset$.value;\n\n    return {\n      'display': 'grid',\n      'grid-template-columns': `repeat(${columns}, 1fr)`\n    };\n  }\n}\n","import { Directive } from '@angular/core';\nimport { StyleDefinition } from '@angular/flex-layout/core';\nimport { LayoutDirective } from '../classes/layout-directive';\n\nconst selector: string = `\n  [dgPlace],\n  [dgPlace.xs], [dgPlace.sm], [dgPlace.md], [dgPlace.lg], [dgPlace.xl],\n  [dgPlace.lt-sm], [dgPlace.lt-md], [dgPlace.lt-lg], [dgPlace.lt-xl],\n  [dgPlace.gt-xs], [dgPlace.gt-sm], [dgPlace.gt-md], [dgPlace.gt-lg]\n`;\n\nconst inputs: string[] = [\n  'dgPlace',\n  'dgPlace.xs', 'dgPlace.sm', 'dgPlace.md', 'dgPlace.lg', 'dgPlace.xl',\n  'dgPlace.lt-sm', 'dgPlace.lt-md', 'dgPlace.lt-lg', 'dgPlace.lt-xl',\n  'dgPlace.gt-xs', 'dgPlace.gt-sm', 'dgPlace.gt-md', 'dgPlace.gt-lg'\n];\n\n@Directive({\n  selector,\n  inputs\n})\nexport class PlaceDirective extends LayoutDirective {\n  public inputs: string[] = inputs;\n\n  public buildStyle(inputValue?: string): StyleDefinition {\n    return {\n      'place-self': inputValue || 'auto'\n    };\n  }\n}\n","import { NgModule, Type } from '@angular/core';\n\n// Modules\nimport { CoreModule } from '@angular/flex-layout/core';\n\nconst modules: Type<object>[] = [\n  CoreModule\n];\n\n// Directives\nimport { ContainerDirective } from './directives/container.directive';\nimport { GridCellDirective } from './directives/grid-cell.directive';\nimport { GridFlowDirective } from './directives/grid-flow.directive';\nimport { GridGapDirective } from './directives/grid-gap.directive';\nimport { GridDirective } from './directives/grid.directive';\nimport { PlaceDirective } from './directives/place.directive';\n\nconst directives: Type<object>[] = [\n  ContainerDirective,\n  GridCellDirective,\n  GridFlowDirective,\n  GridGapDirective,\n  GridDirective,\n  PlaceDirective\n];\n\n@NgModule({\n  imports: [\n    ...modules\n  ],\n\n  exports: [\n    ...directives\n  ],\n\n  declarations: [\n    ...directives\n  ]\n})\nexport class LayoutGridModule {}\n"]}